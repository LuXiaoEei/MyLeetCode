# Integer to Roman

将整数转换成罗马数字,整数的范围是1-3999

主要是花时间了解了一下罗马数字的转换规则,不得不感慨罗马数字也是厉害啊

字母	     M	   D	 C	L	  X	 V	I
代表数字	1000	500	100	50	10	5	1

四个规则
1.相同的数字连写， 所表示的数等于这些数字相加得到的数。如 XXX表示 30
2.小的数字在大的数字的右边， 所表示的数等于这些数字相加得到的数 如VIII 表示8
3.小的数字(限于I, X, C)在大的数字的左边， 所表示的数等于大数减去小的数： 如IV 表示4
4.在一个数的上面画一条横线， 表示这个数增值1000倍(由于题目只考虑4000以内的数，所以这条规则不用考虑)。

五个组数规则
1.I, X, C： 最多只能连用3个， 如果放在大数的左边，只能用1个。
2.V, L, D: 不能放在大数的左边，只能使用一个。
3.I 只能用在V和X的左边。 IV表示4, IX表示9
4.X只能放在L,C左边。 XL 表示40, XC表示90
5.C只能用在D, M左边。 CD 表示400, CM表示900

仔细发现只要整数的每位数字分别转换为罗马数字，而且不同数位上的数字转换的时候，对应模式都是一样的，只是代表字母不一样，
所以只要提前定义一下转换的逻辑即可

```py
class Solution:
    def intToRoman(self, num):
        """
        :type num: int
        :rtype: str
        """
        if num<1 or num >3999:
            raise ValueError ('please input the value between 1~3999')
        
        flag=(('I','V','X'),('X','L','C'),('C','D','M'),('M'))
        Index=((0,),(0,0),(0,0,0),(0,1),(1,),(1,0),(1,0,0),(1,0,0,0),(0,2))
        
        Res=[]
        r=0
        while num >0:
            index=num%10-1
            if index!=-1:
                Res.insert(0,[flag[r][x] for x in Index[index]])
            r+=1
            num//=10
        return ''.join([''.join(x) for x in Res])
            

```
